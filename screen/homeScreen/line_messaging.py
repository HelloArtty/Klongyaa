from datetime import datetime

import requests
from linebot import LineBotApi
from linebot.models import TextMessage


def sendLineMessage(pill_data, time, config):
    """
    Send Line notification for pill taking
    """
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏µ‡∏¢‡πå 'name' ‡πÅ‡∏•‡∏∞ 'pillsPerTime' ‡πÉ‡∏ô pill_data
    pill_name = pill_data.get('name', '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤')
    pill_amount_pertime = pill_data.get('pillsPerTime', 1)
    print('time', time)
    
    # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    try:
        specified_minutes = int(time.split(':')[0]) * 60 + int(time.split(':')[1])
    except ValueError:
        print("Invalid time format.")
        return

    # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    current_time = datetime.now()
    current_minutes = current_time.hour * 60 + current_time.minute

    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ô‡∏≤‡∏ó‡∏µ
    inMinute = specified_minutes - current_minutes
        
    text = f"üïí ‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏¥‡∏ô‡∏¢‡∏≤!\n" \
            f"‡∏ä‡∏∑‡πà‡∏≠: {pill_name}\n" \
            f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: {pill_amount_pertime} ‡πÄ‡∏°‡πá‡∏î\n" \
            f"‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å: {inMinute} ‡∏ô‡∏≤‡∏ó‡∏µ"
    print(text)
    
    try:
        LineBotApi(config.get('botAccessToken')).push_message(config.get('lineId'), TextMessage(text=text))
    except Exception as e:
        print(f"Error sending message to Line: {e}")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö userId
    if not config.get('userId'):
        print("Error: userId is missing or invalid.")
        return
    
    # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á backend
    try:
        res = requests.post(config["url"] + "/user/addHistory", json={
            "task": "alert",
            "userID": config["userId"],
            "medicine": str(pill_data.get("pillId", "")),
        })
        if res.status_code == 200:
            print('Pill alert sent successfully to backend')
        else:
            print(f'Failed to send pill alert to backend, status code: {res.status_code}')
    except requests.exceptions.RequestException as e:
        print(f"Error in backend request: {e}")

def sendLateMessage(pill_data, time, config):
    """
    Send late pill taking notification
    """
    pill_name = pill_data.get('name', '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤')
    pill_amount_pertime = pill_data.get('pillsPerTime', 1)

    text = f"‚ö†Ô∏è ‡∏•‡∏∑‡∏°‡∏ó‡∏≤‡∏ô‡∏¢‡∏≤!\n" \
            f"‡∏ä‡∏∑‡πà‡∏≠: {pill_name}\n" \
            f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: {pill_amount_pertime} ‡πÄ‡∏°‡πá‡∏î\n" \
            f"‡πÄ‡∏ß‡∏•‡∏≤: {time}"
    print(text)
    
    try:
        LineBotApi(config.get('botAccessToken')).push_message(config.get('lineId'), TextMessage(text=text))
    except Exception as e:
        print(f"Error sending message to Line: {e}")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö userId
    if not config.get('userId'):
        print("Error: userId is missing or invalid.")
        return

    # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á backend
    try:
        res = requests.post(config["url"] + "/user/addHistory", json={
            "task": "forget",
            "userID": config["userId"],
            "medicine": str(pill_data["pillId"]),
        })
        if res.status_code == 200:
            print('Late message sent successfully to backend')
        else:
            print(f'Failed to send late message to backend, status code: {res.status_code}')
    except requests.exceptions.RequestException as e:
        print(f"Error in backend request: {e}")
    except KeyError as e:
        print(f"KeyError: {e} - Missing key in pill_data or config.")
    except Exception as e:
        print(f"An error occurred: {e}")
